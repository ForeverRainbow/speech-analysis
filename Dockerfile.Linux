FROM ubuntu:latest AS build

# Install build tools.
RUN apt-get update && \
        apt-get install -yy \
            build-essential cmake gcc g++ \
            git wget \
            libgl1-mesa-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrender-dev \
            libxcb1-dev \
            libx11-xcb-dev \
            libxcb-glx0-dev \
            libxkbcommon-x11-dev \
            libjack-dev \
            libasound-dev \
            libopenblas-dev

# Install qt5 static libraries.
RUN git clone git://code.qt.io/qt/qt5.git /usr/qt5 && \
        cd /usr/qt5 && \
        git checkout v5.14.1 && \
        perl init-repository --module-subset=qtbase

RUN mkdir /usr/qt5-build && \
        cd /usr/qt5-build && \
        ../qt5/configure -release -opensource -confirm-license -qt-zlib -qt-libjpeg -qt-libpng -qt-xcb -qt-freetype -qt-pcre -qt-harfbuzz -nomake examples -nomake tests -static -prefix /usr && \
        make -j$(nproc) && \
        make install

# Install portaudio static library.
RUN wget http://www.portaudio.com/archives/pa_snapshot.tgz && \
        tar -xvf pa_snapshot.tgz -C /usr && \
        cd /usr/portaudio && \
        mkdir -p build && \
        cd build && \
        cmake .. && \
        make -j$(nproc) && \
        make install

# Install fftw3 static library.
RUN wget http://www.fftw.org/fftw-3.3.8.tar.gz && \
        tar -xvf fftw-3.3.8.tar.gz -C /usr && \
        cd /usr/fftw-3.3.8 && \
        mkdir -p build && \
        cd build && \
        cmake -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTS=OFF -DENABLE_SSE=ON -DENABLE_SSE2=ON -DENABLE_AVX=ON -DENABLE_AVX2=ON .. && \
        make -j$(nproc) && \
        make install

# Install eigen header library.
RUN wget https://gitlab.com/libeigen/eigen/-/archive/master/eigen-master.tar.bz2 && \
        tar -xvf eigen-master.tar.bz2 -C /usr && \
        cd /usr/eigen-master && \
        mkdir -p build && \
        cd build && \
        cmake .. && \
        make -j$(nproc) && \
        make install

# Copy working directory to compile.
COPY . /usr/src

RUN cd /usr/src && \
        mkdir -p build && \
        cd build && \
        cmake --config Release .. && \
        make -j$(nproc) && \
        cp /usr/src/build/speech_analysis/src/main-build/speech_analysis /out
